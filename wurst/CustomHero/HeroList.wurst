package HeroList
import HashMap
import EventHelper
import ClosureTimers

import Assets
import ObjectIdGenerator
import CustomHero


public let heroes = new IterableMap<string, int>
	..put("Firelord", compiletime(buildFirelord()))
	..put("Northerner", compiletime(buildNortherner()))
	..put("Mad Poet", compiletime(buildMadPoet()))
	..put("Ancient of Lore", compiletime(buildAncientOfLore()))
	..put("Eredar-Sorcerer", compiletime(buildEredarSorcerer()))
	..put("Dreadlord", compiletime(buildDreadlord()))
	..put("Spirit Walker", compiletime(buildSpiritWalker()))
	..put("Bandit", compiletime(buildBandit()))
	..put("Trollin' Hunter", compiletime(buildTrollingHunter()))
	..put("Banshee", compiletime(buildBanshee()))
	..put("Tentacle Monster", compiletime(buildTentacleMonster()))
	..put("Death Knight", compiletime(buildDeathKnight()))
	..put("Keeper of the Grove", compiletime(buildKeeperOfTheGrove()))


init /* TEST ======================== */
/* 	for h in heroes
		createUnit(localPlayer, heroes.get(h), gg_rct_Base.getCenter(), angle(0)) */


function buildFirelord() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Units.heroFlameLord)
		..setUnitSoundSet("HeroFireLord")
		..setProperNames("Lindemann")
		..setName("Firelord")
		..setProperNamesUsed(1)
		..setScalingValue(1.1)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNHeroAvatarOfFlame)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalHeavySlice)
		else
			def..setAttack1ProjectileArt(Abilities.lordofFlameMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
	return meleeFormId


function buildNortherner() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.heroPaladin)
		..setProperNames("Elon Tusk")
		..setName("Northerner")
		..setProperNamesUsed(1)
		..setScalingValue(1.1)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNTuskaarGold)
		if isMelee
			def..setModelFile(Units.tuskar)
			..setAttack1WeaponSound(WeaponSound.MetalMediumChop)
		else
			def..setModelFile(Units.tuskarRanged)
			..setAttack1ProjectileArt(Abilities.tuskarSpear)
			..setAttack1WeaponSound(WeaponSound.Nothing)
	return meleeFormId


function buildMadPoet() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Units.orcWarlockRed1)
		..setUnitSoundSet("Grom")
		..setProperNames("Abdul Alhazred")
		..setName("Mad Poet")
		..setProperNamesUsed(1)
		..setScalingValue(1.4)
		..setSelectionScale(1.6)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNOrcWarlockRed)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalLightSlice)
		else
			def..setAttack1ProjectileArt(Abilities.makuraMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0)
	return meleeFormId


function buildEredarSorcerer() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Units.eredarWarlockPurple)
		..setUnitSoundSet(Soundsets.varimathras)
		..setProperNames("Mozenrath")
		..setName("Eredar-Sorcerer")
		..setProperNamesUsed(1)
		..setScalingValue(1.2)
		..setSelectionScale(1.6)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNEredarWarlockPurple)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.WoodMediumBash)
		else
			def..setAttack1ProjectileArt(Abilities.voidWalkerMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0.05)
			..setProjectileLaunchZ(70)
	return meleeFormId


function buildDreadlord() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Units.heroDreadLord)
		..setUnitSoundSet(Soundsets.heroDreadLord)
		..setProperNames("Doctor Moreau")
		..setName("Dreadlord")
		..setProperNamesUsed(1)
		..setScalingValue(1)
		..setSelectionScale(1.5)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNHeroDreadLord)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.WoodHeavyBash)
		else
			def..setAttack1ProjectileArt(Abilities.avengerMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0)
	return meleeFormId


function buildSpiritWalker() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Units.spiritWalker)
		..setUnitSoundSet(Soundsets.spiritWalker)
		..setProperNames("Mogambo")
		..setName("Spirit Walker")
		..setProperNamesUsed(1)
		..setScalingValue(1)
		..setSelectionScale(1.5)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNSpiritWalker)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalMediumChop)
		else
			def..setAttack1ProjectileArt(Abilities.witchDoctorMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
	return meleeFormId


function buildBandit() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.bandit)
		..setProperNames("Michael ''The Pot''")
		..setName("Bandit")
		..setProperNamesUsed(1)
		..setScalingValue(1.4)
		..setSelectionScale(1.3)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNBandit)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalMediumChop)
			..setModelFile(Units.bandit1)
		else
			def..setAttack1ProjectileArt(Abilities.huntermissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setModelFile(Units.banditSpearThrower)
	return meleeFormId


function buildBanshee() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.banshee)
		..setProperNames("Karen Braineater")
		..setName("Banshee")
		..setProperNamesUsed(1)
		..setScalingValue(1.4)
		..setSelectionScale(1.3)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNBanshee)
		..setModelFile(Units.banshee1)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.WoodLightBash)
		else
			def..setAttack1ProjectileArt(Abilities.bansheeMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0)
			..setProjectileLaunchZ(50)
	return meleeFormId


function buildTrollingHunter() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.headHunter)
		..setProperNames("Zul'Chuk")
		..setName("Trollin' Hunter")
		..setProperNamesUsed(1)
		..setSelectionScale(1.4)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNIceTroll)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalMediumChop)
			..setModelFile(Units.iceTroll1)
			..setScalingValue(1.5)
		else
			def..setAttack1ProjectileArt(Abilities.murgulMagicMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0.1)
			..setModelFile(Units.iceTrollShadowPriest1)
			..setScalingValue(1.4)
	return meleeFormId

init
	CreateTrigger()..registerAttackTypeSwitchEvent()
	..addAction() ->
		let u = EventData.getTriggerUnit()
		if u.getProperName() == "Zul'Chuk"
			nullTimer() () ->
				u.setProperName("Zul'Gek")
		if u.getProperName() == "Zul'Gek"
			nullTimer() () ->
				u.setProperName("Zul'Chuk")


function buildAncientOfLore() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setModelFile(Buildings.ancientofLore)
		..setUnitSoundSet(Soundsets.ancientOfLore)
		..setProperNames("Dagda")
		..setName("Ancient of Lore")
		..setProperNamesUsed(1)
		..setScalingValue(0.85)
		..setSelectionScale(2)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNAncientOfLore)
		..setRequiredAnimationNames("")
		..setRequiredAnimationNamesAttachments("")
		..setRequiredAttachmentLinkNames("")
		..setRequiredBoneNames("")
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.WoodMediumBash)
		else
			def..setAttack1ProjectileArt(Units.snowOwl1)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0.05)
	return meleeFormId

init
	CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST)
	..addAction()-> 
		let u = EventData.getTriggerUnit()
		if  u.getTypeId() == compiletime(heroes.get("Ancient of Lore"))
			AddUnitAnimationProperties(u, "alternate", false) 


function buildTentacleMonster() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.sludgeMonster)
		..setProperNames("Weeb")
		..setName("Tentacle Monster")
		..setProperNamesUsed(1)
		..setScalingValue(1.6)
		..setSelectionScale(2.1)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNSludgeCreature)
		..setModelFile(Units.sludgeMonster)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.WoodLightBash)
		else
			def..setAttack1ProjectileArt(Abilities.cryptFiendMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0)
			..setProjectileLaunchZ(0)
	return meleeFormId


function buildDeathKnight() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.heroDeathKnight)
		..setProperNames("Azazello")
		..setName("Death Knight")
		..setProperNamesUsed(1)
		..setScalingValue(1.)
		..setSelectionScale(1.4)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNHeroDeathKnight)
		..setModelFile(Units.heroDeathKnight)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalHeavySlice)
		else
			def..setAttack1ProjectileArt(Abilities.deathCoilMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0)
			..setProjectileLaunchZ(100)
	return meleeFormId


function buildKeeperOfTheGrove() returns int
	let meleeFormId = HERO_ID_GEN.next()
	buildCustomHero(meleeFormId) (def, isMelee) ->
		def..setUnitSoundSet(Soundsets.heroKeeperOfTheGrove)
		..setModelFile(Units.heroKeeperoftheGrove)
		..setProperNames("Bambi")
		..setName("Keeper of the Grove")
		..setProperNamesUsed(1)
		..setScalingValue(1.)
		..setSelectionScale(1.9)
		..setScaleProjectiles(false)
		..setIconGameInterface(Icons.bTNKeeperOfTheGrove)
		if isMelee
			def..setAttack1WeaponSound(WeaponSound.MetalLightChop)
		else
			def..setAttack1ProjectileArt(Abilities.keeperGroveMissile)
			..setAttack1WeaponSound(WeaponSound.Nothing)
			..setAttack1ProjectileArc(0.1)
			..setProjectileLaunchZ(70)
	return meleeFormId