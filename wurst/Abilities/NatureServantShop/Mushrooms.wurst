package Mushrooms
import Assets
import ChannelAbilityPreset
import AbilityTooltipGenerator
import HotkeyFactory
import NatureServantShop

import LinkedList
import ClosureEvents
import ClosureTimers
import ClosureForGroups


constant int SHOP_COST = 1
constant int LEVELS = 5
constant ICON = "ReplaceableTextures\\CommandButtons\\BTNMushrooms.blp"
constant HOTKEY = getHotkey()
constant NAME = "Mushrooms"
constant DESCRIPTION = "Mushrooms grow beneath the hero's feet, whose spores heal allies every second."

constant ART_CAST = Objects.nEDeath
constant ART_TARGET = Abilities.vampiricAuraTarget
constant MUSHROOM_MODEL_VAR = asList<string>(Doodads.ashenShrooms0, Doodads.ashenShrooms1, Doodads.ashenShrooms3)
constant MUSHROOM_COLOR = color(0, 255, 0)
constant MUSHROOM_ART_DEATH = Abilities.mirrorImageDeathCaster
constant int MUSHROOMS_DENSITY = 6
constant real MUSHROOM_MIN_SCALE = 0.85
constant real MUSHROOM_MAX_SCALE = 1.
constant real MUSHROOMS_GROWING_TIME = 1
constant real MUSHROOMS_SPAWN_INTERVAL = 0.04

constant real array HEALING = [20, 25, 35, 50, 70]
constant real MISSED_HEALTH_FACTOR = 0.02
constant real AOE = 200.
constant real DURATION = 10
constant real COOLDOWN = 30
constant int array MANACOST = [125, 140, 155, 170, 185]

constant ABIL_ID = compiletime(ABIL_ID_GEN.next())


@compiletime function build()
	let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
	..addPropertyPostfix("Healing", " + " + (MISSED_HEALTH_FACTOR * 100).toInt().toString() + "% missing hit points")
	new ChannelAbilityPreset(ABIL_ID, LEVELS, true)
	..setIconNormal(ICON)
	..setHeroAbility(true)
	..setRequirements("")
	..setRace(Race.Human)
	..setArtTarget("")
	..setArtEffect("")
	..setArtCaster("")
	..setArtSpecial("")
	..setName(NAME)
	..registerTooltipGenerator(tooltipGen)
	..tooltipStartListen()
	..setLevels(LEVELS)
	..presetHotkey(HOTKEY)
	..presetAreaofEffect(lvl -> AOE)
	..presetManaCost(lvl -> MANACOST[lvl - 1])
	..presetCooldown(lvl -> COOLDOWN)
	..presetDurationNormal(lvl -> DURATION)
	..addTooltipProperty("Healing", (int lvl) -> HEALING[lvl - 1])
	..tooltipStopListen()
	..presetTargetsAllowed(lvl -> TargetsAllowed.enemies)
	..presetOption(Option.VISIBLE, true)
	..presetOption(Option.TARGETIMAGE, false)
	..presetTargetType((int lvl) -> Targettype.NONE castTo int)
	..presetDisableOtherAbilities((int lvl) -> false)
	..presetFollowThroughTime((int lvl) -> 1.)
	..presetArtDuration((int lvl) -> 5) 
	..presetCastingTime((int lvl) -> 0)
	natureServantShopDef.addAbilitySold(ABIL_ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)


init
	EventListener.onCast(ABIL_ID) (unit caster) ->
		let casterPos = caster.getPos()
		flashEffect(ART_CAST, casterPos)
		let startPos = casterPos.add(-AOE, -AOE)
		let areaSq = AOE.squared()
		let offsetRange = AOE * 2 / MUSHROOMS_DENSITY
		let randomOffsetRange = AOE / MUSHROOMS_DENSITY
		var count = 0
		vec2 array positions
		for i = 1 to MUSHROOMS_DENSITY 
			for n = 0 to MUSHROOMS_DENSITY - 1
				let randomOffset = vec2(GetRandomReal(-randomOffsetRange, randomOffsetRange), GetRandomReal(-randomOffsetRange, randomOffsetRange))
				let pos = startPos.add(offsetRange * (i - 1), offsetRange * n) + randomOffset
				if pos.distanceToSq(casterPos) <= areaSq
					positions[count] = pos
					count++
		var spawnDelay = 0.0
		while count > 0
			let random = GetRandomInt(0, count - 1)
			let pos = positions[random]
			doAfter(spawnDelay) () ->
				let mushroom = addEffect(MUSHROOM_MODEL_VAR.get(GetRandomInt(0, MUSHROOM_MODEL_VAR.size() - 1)), pos)
				..setYaw(GetRandomReal(-180, 180).asAngleDegrees())
				..setColor(MUSHROOM_COLOR)
				..setScale(0)
				let timerInterval = 0.02
				let targetScaling = GetRandomReal(MUSHROOM_MIN_SCALE, MUSHROOM_MAX_SCALE)
				var scaling = 0.0
				doPeriodicallyTimed(timerInterval, MUSHROOMS_GROWING_TIME) (CallbackCounted cb) ->
					scaling += timerInterval / MUSHROOMS_GROWING_TIME * targetScaling
					mushroom.setScale(scaling)
					if cb.isLast()
						doAfter(DURATION - spawnDelay - MUSHROOMS_GROWING_TIME) () ->
							mushroom..setScale(0)
							..destr()
							flashEffect(MUSHROOM_ART_DEATH, pos)
			spawnDelay += MUSHROOMS_SPAWN_INTERVAL
			count--
			positions[random] = positions[count]
		let healing = HEALING[caster.getAbilityLevel(ABIL_ID) - 1]
		let missedHealthFactor = MISSED_HEALTH_FACTOR
		doPeriodicallyTimed(1, DURATION) (CallbackCounted cb) ->
			forUnitsInRange(casterPos, AOE, true) (unit u) ->
				if u.isAlive() and u.isAllyOf(caster) and not u.isInvulnerable() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE)
					u.setLife(u.getLife() + healing + (u.getMaxHP() - u.getLife()) * missedHealthFactor)
					flashEffect(ART_TARGET, u, "origin")