package AttackPrevention
import ClosureEvents
import OrderIds
import LinkedList


let preventionCheckCallbacks = new LinkedList<IAttackPreventionCheckCallback>

/** An attack order and an attack will be prevented if the callback returns 'true' value.
Works only with ally units. */
public function onAttackPreventionCheck(IAttackPreventionCheckCallback cb)
	preventionCheckCallbacks.add(cb)


interface IAttackPreventionCheckCallback
	function call(unit attacker, unit target) returns bool

	ondestroy
		preventionCheckCallbacks.remove(this)


init
	EventListener.add(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER) () ->
		if EventData.getIssuedOrderId() == OrderIds.attack
			let attacker = EventData.getOrderedUnit()
			let target = EventData.getOrderTargetUnit()
			if target.isAllyOf(attacker)
				if preventionCheckCallbacks.isEmpty()
					attacker.issueTargetOrderById(OrderIds.move, target)
				else
					for cb in preventionCheckCallbacks
						if cb.call(attacker, target)
							attacker.issueTargetOrderById(OrderIds.move, target)


	EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) () ->
		let attacker = EventData.getAttackerUnit()
		let target = EventData.getTriggerUnit()
		if target.isAllyOf(attacker)
			if preventionCheckCallbacks.isEmpty()
				attacker.issueImmediateOrderById(OrderIds.stop)
			else
				for cb in preventionCheckCallbacks
					if cb.call(attacker, target)
						attacker.issueImmediateOrderById(OrderIds.stop)