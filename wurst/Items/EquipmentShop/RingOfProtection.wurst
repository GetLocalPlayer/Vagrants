package RingOfProtection
import Assets
import ObjectIds
import ObjectIdGenerator
import AbilityObjEditing
import EquipmentShop
import ItemAlias
import ItemTooltipGenerator
import ItemAbilityPreset


public class RingOfProtection
	static constant int GOLD_COST = 150
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "Ring of Protection"
	static constant ICON = Icons.bTNRingGreen
	static constant int SHOP_X = 3
	static constant int SHOP_Y = 0
	static constant int DEFENCE = 2
	static constant int ID = compiletime(ITEM_ID_GEN.next())
	static constant int ALIAS_ID = compiletime(ITEM_ID_GEN.next())

	@compiletime protected static function build()
		let tooltipGenerator = new ItemTooltipGenerator(NAME, "", GOLD_COST, "")
		let abilDef = buildDefenseBonus(NAME, ICON, DEFENCE, tooltipGenerator)
		ItemAlias.build(ID, ALIAS_ID) (def, isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setGoldCost(GOLD_COST)
			..setButtonPositionX(SHOP_X)
			..setButtonPositionY(SHOP_Y)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(ICON)
			tooltipGenerator.applyToDef(def)
			if isAlias
				equipmentShop.addItemSold(def.getNewId())
			else
				def.setAbilities(abilDef.getNewId().toRawCode())